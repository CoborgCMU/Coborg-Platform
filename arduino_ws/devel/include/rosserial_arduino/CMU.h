// Generated by gencpp from file rosserial_arduino/CMU.msg
// DO NOT EDIT!


#ifndef ROSSERIAL_ARDUINO_MESSAGE_CMU_H
#define ROSSERIAL_ARDUINO_MESSAGE_CMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosserial_arduino
{
template <class ContainerAllocator>
struct CMU_
{
  typedef CMU_<ContainerAllocator> Type;

  CMU_()
    : Potentiometer(0)
    , Flex_Sensor(0)
    , IR_Sensor(0)
    , Ultrasonic_Sensor(0)
    , Button_State(0)  {
    }
  CMU_(const ContainerAllocator& _alloc)
    : Potentiometer(0)
    , Flex_Sensor(0)
    , IR_Sensor(0)
    , Ultrasonic_Sensor(0)
    , Button_State(0)  {
  (void)_alloc;
    }



   typedef uint16_t _Potentiometer_type;
  _Potentiometer_type Potentiometer;

   typedef uint16_t _Flex_Sensor_type;
  _Flex_Sensor_type Flex_Sensor;

   typedef uint16_t _IR_Sensor_type;
  _IR_Sensor_type IR_Sensor;

   typedef uint16_t _Ultrasonic_Sensor_type;
  _Ultrasonic_Sensor_type Ultrasonic_Sensor;

   typedef uint16_t _Button_State_type;
  _Button_State_type Button_State;





  typedef boost::shared_ptr< ::rosserial_arduino::CMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosserial_arduino::CMU_<ContainerAllocator> const> ConstPtr;

}; // struct CMU_

typedef ::rosserial_arduino::CMU_<std::allocator<void> > CMU;

typedef boost::shared_ptr< ::rosserial_arduino::CMU > CMUPtr;
typedef boost::shared_ptr< ::rosserial_arduino::CMU const> CMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosserial_arduino::CMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosserial_arduino::CMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosserial_arduino::CMU_<ContainerAllocator1> & lhs, const ::rosserial_arduino::CMU_<ContainerAllocator2> & rhs)
{
  return lhs.Potentiometer == rhs.Potentiometer &&
    lhs.Flex_Sensor == rhs.Flex_Sensor &&
    lhs.IR_Sensor == rhs.IR_Sensor &&
    lhs.Ultrasonic_Sensor == rhs.Ultrasonic_Sensor &&
    lhs.Button_State == rhs.Button_State;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosserial_arduino::CMU_<ContainerAllocator1> & lhs, const ::rosserial_arduino::CMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosserial_arduino

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosserial_arduino::CMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosserial_arduino::CMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosserial_arduino::CMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosserial_arduino::CMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosserial_arduino::CMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosserial_arduino::CMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosserial_arduino::CMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be9cdfeec1c60f4d26327be218060167";
  }

  static const char* value(const ::rosserial_arduino::CMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe9cdfeec1c60f4dULL;
  static const uint64_t static_value2 = 0x26327be218060167ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosserial_arduino::CMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosserial_arduino/CMU";
  }

  static const char* value(const ::rosserial_arduino::CMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosserial_arduino::CMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 Potentiometer\n"
"uint16 Flex_Sensor\n"
"uint16 IR_Sensor\n"
"uint16 Ultrasonic_Sensor\n"
"uint16 Button_State\n"
;
  }

  static const char* value(const ::rosserial_arduino::CMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosserial_arduino::CMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Potentiometer);
      stream.next(m.Flex_Sensor);
      stream.next(m.IR_Sensor);
      stream.next(m.Ultrasonic_Sensor);
      stream.next(m.Button_State);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosserial_arduino::CMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosserial_arduino::CMU_<ContainerAllocator>& v)
  {
    s << indent << "Potentiometer: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Potentiometer);
    s << indent << "Flex_Sensor: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Flex_Sensor);
    s << indent << "IR_Sensor: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.IR_Sensor);
    s << indent << "Ultrasonic_Sensor: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Ultrasonic_Sensor);
    s << indent << "Button_State: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Button_State);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSSERIAL_ARDUINO_MESSAGE_CMU_H
