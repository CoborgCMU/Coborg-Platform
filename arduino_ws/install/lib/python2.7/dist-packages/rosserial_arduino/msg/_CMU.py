# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosserial_arduino/CMU.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CMU(genpy.Message):
  _md5sum = "be9cdfeec1c60f4d26327be218060167"
  _type = "rosserial_arduino/CMU"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 Potentiometer
uint16 Flex_Sensor
uint16 IR_Sensor
uint16 Ultrasonic_Sensor
uint16 Button_State"""
  __slots__ = ['Potentiometer','Flex_Sensor','IR_Sensor','Ultrasonic_Sensor','Button_State']
  _slot_types = ['uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Potentiometer,Flex_Sensor,IR_Sensor,Ultrasonic_Sensor,Button_State

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CMU, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Potentiometer is None:
        self.Potentiometer = 0
      if self.Flex_Sensor is None:
        self.Flex_Sensor = 0
      if self.IR_Sensor is None:
        self.IR_Sensor = 0
      if self.Ultrasonic_Sensor is None:
        self.Ultrasonic_Sensor = 0
      if self.Button_State is None:
        self.Button_State = 0
    else:
      self.Potentiometer = 0
      self.Flex_Sensor = 0
      self.IR_Sensor = 0
      self.Ultrasonic_Sensor = 0
      self.Button_State = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5H().pack(_x.Potentiometer, _x.Flex_Sensor, _x.IR_Sensor, _x.Ultrasonic_Sensor, _x.Button_State))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.Potentiometer, _x.Flex_Sensor, _x.IR_Sensor, _x.Ultrasonic_Sensor, _x.Button_State,) = _get_struct_5H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5H().pack(_x.Potentiometer, _x.Flex_Sensor, _x.IR_Sensor, _x.Ultrasonic_Sensor, _x.Button_State))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.Potentiometer, _x.Flex_Sensor, _x.IR_Sensor, _x.Ultrasonic_Sensor, _x.Button_State,) = _get_struct_5H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5H = None
def _get_struct_5H():
    global _struct_5H
    if _struct_5H is None:
        _struct_5H = struct.Struct("<5H")
    return _struct_5H
